import telebot
import random
import logging
import math

from telebot import types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger("tgbot.log")

bot = telebot.TeleBot("8149032596:AAF-RPvPHAVXqHkaEMSP_T5c0QdX1iz9K9U")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
def generate_math_problem(difficulty):
    if difficulty == 'easy':
        a, b = random.randint(1, 10), random.randint(1, 10)
        return f"{a} + {b}", a + b
    elif difficulty == 'normal':
        a = random.randint(10, 50)
        b = random.randint(1, 20)
        operator = random.choice(['-', '*', '/'])
        if operator == '-':
            return f"{a} - {b}", a - b
        elif operator == '*':
            return f"{a} * {b}", a * b
        elif operator == '/':
            # –î–µ–ª–∞–µ–º –¥–µ–ª–µ–Ω–∏–µ —Å –¥–µ—Å—è—Ç–∏—á–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏
            while b == 0:
                b = random.randint(1, 20)
            return f"{a} / {b}", round(a / b, 2)
    elif difficulty == 'hard':
        # –õ–∏–Ω–µ–π–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: ax + b = c
        a = random.randint(1, 10)
        b = random.randint(5, 20)
        c = random.randint(20, 100)
        # –†–µ—à–∞–µ–º —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª—è x: ax = c - b
        x = (c - b) / a
        return f"{a}x + {b} = {c}", round(x, 2)

    elif difficulty == 'very_hard':
        problem_type = random.choice(['logarithmic', 'discriminant', 'theorem'])

        # –ó–∞–¥–∞—á–∏ —Å –ª–æ–≥–∞—Ä–∏—Ñ–º–∞–º–∏
        if problem_type == 'logarithmic':
            a = random.randint(2, 10)
            b = random.randint(1, 50)
            c = random.randint(1, 10)
            # –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–∏–¥–∞: log_a(x) = b
            # –¢–æ –µ—Å—Ç—å a^b = x
            x = a ** b
            return f"log_{a}(x) = {b}", x

        # –ó–∞–¥–∞—á–∏ —Å –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç–æ–º
        elif problem_type == 'discriminant':
            a = random.randint(1, 10)
            b = random.randint(-20, 20)
            c = random.randint(1, 20)
            # –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ ax^2 + bx + c = 0
            discriminant = b ** 2 - 4 * a * c
            if discriminant >= 0:
                # –ö–æ—Ä–Ω–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è
                x1 = (-b + math.sqrt(discriminant)) / (2 * a)
                x2 = (-b - math.sqrt(discriminant)) / (2 * a)
                return f"{a}x^2 + {b}x + {c} = 0", (round(x1, 2), round(x2, 2))
            else:
                return f"{a}x^2 + {b}x + {c} = 0", "–ù–µ—Ç —Ä–µ—à–µ–Ω–∏–π"

        # –ó–∞–¥–∞—á–∏ –ø–æ —Ç–µ–æ—Ä–µ–º–µ –ü–∏—Ñ–∞–≥–æ—Ä–∞
        elif problem_type == 'theorem':
            a = random.randint(1, 20)
            b = random.randint(1, 20)
            # –ó–∞–¥–∞—á–∞ –Ω–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –≥–∏–ø–æ—Ç–µ–Ω—É–∑—ã: a^2 + b^2 = c^2
            c = math.sqrt(a ** 2 + b ** 2)
            return f"–ù–∞–π–¥–∏—Ç–µ –≥–∏–ø–æ—Ç–µ–Ω—É–∑—É —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å –∫–∞—Ç–µ—Ç–∞–º–∏ {a} –∏ {b}", round(c, 2)


# –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
current_problems = {}


@bot.message_handler(commands=['start'])
def welcome(message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.")

    # keyboard
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üìò –õ–µ–≥–∫–∏–π –ø—Ä–∏–º–µ—Ä")
    item2 = types.KeyboardButton("üìó –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–º–µ—Ä")
    item3 = types.KeyboardButton("üìô –°–ª–æ–∂–Ω—ã–π –ø—Ä–∏–º–µ—Ä")
    item4 = types.KeyboardButton("üìö –û—á–µ–Ω—å —Å–ª–æ–∂–Ω—ã–π –ø—Ä–∏–º–µ—Ä")

    markup.add(item1, item2, item3, item4)

    bot.send_message(message.chat.id,
                     "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}! –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞.".format(
                         message.from_user),
                     parse_mode='html', reply_markup=markup)
    logger.info("–í—ã–≤–µ–¥–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")


@bot.message_handler(content_types=['text'])
def chat(message):
    if message.chat.type == 'private':
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.first_name}: {message.text}")

        if message.text == 'üìò –õ–µ–≥–∫–∏–π –ø—Ä–∏–º–µ—Ä':
            problem, answer = generate_math_problem('easy')
            current_problems[message.chat.id] = answer
            bot.send_message(message.chat.id, f"–†–µ—à–∏—Ç–µ: {problem}")
        elif message.text == 'üìó –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–º–µ—Ä':
            problem, answer = generate_math_problem('normal')
            current_problems[message.chat.id] = answer
            bot.send_message(message.chat.id, f"–†–µ—à–∏—Ç–µ: {problem}")
        elif message.text == 'üìô –°–ª–æ–∂–Ω—ã–π –ø—Ä–∏–º–µ—Ä':
            problem, answer = generate_math_problem('hard')
            current_problems[message.chat.id] = answer
            bot.send_message(message.chat.id, f"–†–µ—à–∏—Ç–µ: {problem}")
        elif message.text == 'üìö –û—á–µ–Ω—å —Å–ª–æ–∂–Ω—ã–π –ø—Ä–∏–º–µ—Ä':
            problem, answer = generate_math_problem('very_hard')
            current_problems[message.chat.id] = answer
            bot.send_message(message.chat.id, f"–†–µ—à–∏—Ç–µ: {problem}")
        elif message.text.replace('.', '', 1).isdigit():  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ —á–∏—Å–ª–∞
            user_answer = float(message.text)
            correct_answer = current_problems.get(message.chat.id)
            if correct_answer is not None:
                if round(float(user_answer), 2) == round(float(correct_answer), 2):
                    bot.send_message(message.chat.id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü!")
                else:
                    bot.send_message(message.chat.id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")
                del current_problems[message.chat.id]
            else:
                bot.send_message(message.chat.id,
                                 "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        else:
            bot.send_message(message.chat.id, "–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    bot.polling(none_stop=True)